# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_engine.ipynb.

# %% auto 0
__all__ = ['Value']

# %% ../nbs/00_engine.ipynb 3
import math
import numpy as np
import matplotlib.pyplot as plt

# %% ../nbs/00_engine.ipynb 50
# accumulate gradients
# allow adding and multiplying constants
# exponentiate, power, divide, subtract
# ReLU
class Value:
    '''stores a single scalar value and its gradient'''
    def __init__(self, 
                 data,# a scalar value
                 _children=(),# The children of this value
                 _op='',# The operation (such as +,-,*,tanh etc) that created this value
                 label=''):
        self.data, self._prev, self._op = data, set(_children), _op
        self.label = label 
        self.grad = 0 # derivative of the final Loss with respect to this value
        self._backward = lambda: None #function to chain the incoming gradient with the local gradient(s)
        
    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self,other), '+')
        
        def _backward():
            self.grad += 1.0 * out.grad
            other.grad += 1.0 * out.grad
        out._backward = _backward
        
        return out
    
    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self,other),'*')
                
        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward
        
        return out
    
    def __pow__(self,other): # self^{other}
        assert isinstance(other, (int,float)), "only support int/float powers for now" 
        t = self.data ** other 
        out = Value(t, (self,),f'**{other}')
        
        def _backward():
            self.grad += (other * ( self.data ** (other-1) )) * out.grad
        out._backward = _backward
                
        return out    
    
    def relu(self):
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def backward(self):
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v) 
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)
        
        self.grad = 1.0
        for node in reversed(topo): 
            node._backward()
            
    def __neg__(self): #-self
        return self * -1
    
    def __radd__(self, other): #if cannot do other + self
        return self + other
    
    def __sub__(self, other):
        return self + (-other)   
    
    def  __rsub__(self, other): #if cannot do other - self
        return other + (-self)
            
    def __rmul__(self, other): #if cannot do other times self
        return self*other
    
    def __truediv__(self, other): #self/other
        return self * (other**-1)
    
    def __rtruediv__(self, other): # if cannot do other / self
        return other * self**-1
    
    def tanh(self):
        x = self.data
        t = (math.exp(2*x)-1.)/(math.exp(2*x)+1.)
        out = Value(t,(self,),'tanh',)
              
        def _backward():
            self.grad += (1.0 - t**2) * out.grad
        out._backward = _backward
        
        return out
    
    def exp(self):
        x = self.data
        t = math.exp(x)
        out = Value(t,(self,),'exp',)
        
        def _backward():
            self.grad += t * out.grad
        out._backward = _backward
        
        return out
    
    def __repr__(self):
        return f'Value(data={self.data})'
