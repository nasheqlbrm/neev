# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/6_nn.ipynb.

# %% auto 0
__all__ = ['Neuron', 'Layer', 'MLP']

# %% ../nbs/6_nn.ipynb 3
import random
from .engine import Value

# %% ../nbs/6_nn.ipynb 4
class Neuron:
    def __init__(self, 
                 nin # number of inputs to the neuron
                ):
        self.w = [Value(random.uniform(-1,1)) for i in range(nin)]
        self.b = Value(random.uniform(-1,1))
        
    def __call__(self,x):
        act =  sum((wi*xi for wi,xi in zip(self.w, x)), self.b)
        o = act.tanh()
        return o
    
    def parameters(self):
        return self.w + [self.b]
    
class Layer:
    def __init__(self, 
                 nin,#number of inputs to each neuron in the layer 
                 nout#number of neurons in the layer
                ):
        self.neurons = [Neuron(nin) for _ in range(nout)]

    def __call__(self, x):
        outs = [n(x) for n in self.neurons]
        return outs[0] if len(outs) == 1 else outs
    
    def parameters(self):
        return [p for n in self.neurons for p in n.parameters()]

    
class MLP:
    def __init__(self, 
                 nin,#number of inputs to each neuron in the layer  
                 nouts # list with the number of neurons in each layer of the MLP
                ):
        sz = [nin] + nouts
        self.layers = [Layer(sz[i], sz[i+1]) for i in range(len(nouts))]

    def __call__(self, x):
        for layer in self.layers:
            x = layer(x)
        return x
    
    def parameters(self):
        return [p for l in self.layers for p in l.parameters()]
